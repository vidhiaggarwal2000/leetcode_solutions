/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

typedef pair<int, int> pii;
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size();
        priority_queue<pii, vector<pii>, greater<pii> >  pq;
        ListNode* root = new ListNode();
        ListNode* temp = root;
        for(int i = 0; i < n; i++){
            if(lists[i] != NULL)
                pq.push({lists[i]->val, i});
        }
        
        while(!pq.empty()){
            int node = pq.top().second;
            pq.pop();
            root->next = lists[node];
            if(lists[node]->next != NULL){
                lists[node] = lists[node]->next;
                pq.push({lists[node]->val, node});
            }
            root = root->next;                             
        }
        
        root->next = NULL;
        return temp->next;   

    }
};
